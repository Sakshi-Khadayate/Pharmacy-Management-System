DROP DATABASE PHARMACY_MANAGEMENT

CREATE DATABASE PHARMACY_MANAGEMENT
USE PHARMACY_MANAGEMENT

CREATE TABLE [DOCTOR]
(
[DOCTOR_ID] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
[FIRST_NAME] VARCHAR(50),
[LAST_NAME] VARCHAR(50),
[CONTACT_NO] BIGINT NOT NULL,
[SPECIALIZATION] VARCHAR(30),
[ADDRESS] VARCHAR(100),
[CITY] VARCHAR(30),
[STATE] CHAR(2),
[ZIPCODE] VARCHAR(10) NOT NULL
);

CREATE TABLE [PATIENT]
(
[PATIENT_ID] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
[FIRST_NAME] VARCHAR(50),
[LAST_NAME] VARCHAR(50),
[CONTACT_NO] BIGINT NOT NULL,
[DATE_OF_BIRTH] DATE,
[GENDER] VARCHAR (6),
[INSURANCE_COMPANY] VARCHAR(50),
[INSURANCE_NUMBER] VARCHAR(30),
[ADDRESS] VARCHAR(100),
[CITY] VARCHAR(30),
[STATE] CHAR(2),
[ZIPCODE] VARCHAR(10) NOT NULL
);


CREATE TABLE [DRUG]
(
[DRUG_ID] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
[DRUG_NAME] VARCHAR(100)
); 

CREATE TABLE [DRUG_STORE]
(
[DRUG_STORE_ID] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
[CONTACT_NO] BIGINT NOT NULL,
[ADDRESS] VARCHAR(100),
[CITY] VARCHAR(30),
[STATE] CHAR(2),
[ZIPCODE] VARCHAR(6) NOT NULL
);


CREATE TABLE [SUPPLIER]
(
[SUPPLIER_ID] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
[COMPANY_NAME] VARCHAR(100) ,
[CONTACT_NO] BIGINT NOT NULL,
[ADDRESS] VARCHAR(100),
[CITY] VARCHAR(50),
[STATE] CHAR(2),
[ZIPCODE] VARCHAR(6) NOT NULL,
[SUPPLIER_TYPE] CHAR(2),
);

CREATE TABLE [DRUG_MANUFACTURER]
(
[DRUG_MANUFACTURER_ID] INT NOT NULL PRIMARY KEY ,
[DRUG_MANUFACTURER_CAPACITY] INT
CONSTRAINT DRUG_MANUFACTURER_ID_FK FOREIGN KEY ([DRUG_MANUFACTURER_ID]) REFERENCES [SUPPLIER]([SUPPLIER_ID])
);

CREATE TABLE [DISTRIBUTOR]
(
[DISTRIBUTOR_ID] INT NOT NULL PRIMARY KEY,
[DISTRIBUTOR_SIZE] VARCHAR(10)
CONSTRAINT DISTRIBUTOR_ID_FK FOREIGN KEY ([DISTRIBUTOR_ID]) REFERENCES [SUPPLIER]([SUPPLIER_ID])
);

CREATE TABLE [EMPLOYEE]
(
[EMPLOYEE_ID] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
[FIRST_NAME] VARCHAR(50),
[LAST_NAME] VARCHAR(50),
[CONTACT_NO] BIGINT NOT NULL,
[SSN] CHAR(11),
[JOINING_DATE] DATE,
[DESIGNATION] VARCHAR(10),
[SALARY] BIGINT NOT NULL,
[ADDRESS] VARCHAR(100),
[CITY] VARCHAR(30),
[STATE] CHAR(2),
[ZIPCODE] VARCHAR(10) NOT NULL,
[DRUG_STORE_ID] INT NOT NULL
CONSTRAINT EMPLOYEE_FK FOREIGN KEY ([DRUG_STORE_ID]) REFERENCES [DRUG_STORE]([DRUG_STORE_ID])
);

CREATE TABLE [PRESCRIPTION]
(
[DOCTOR_ID] INT,
[PATIENT_ID] INT,
[DRUG_ID] INT,
[PRESCRIPTION_DATE] DATE
CONSTRAINT PRESCRIPTION_FK1 FOREIGN KEY ([DOCTOR_ID]) REFERENCES [DOCTOR]([DOCTOR_ID]),
CONSTRAINT PRESCRIPTION_FK2 FOREIGN KEY ([PATIENT_ID]) REFERENCES [PATIENT]([PATIENT_ID]),
CONSTRAINT PRESCRIPTION_FK3 FOREIGN KEY ([DRUG_ID]) REFERENCES [DRUG]([DRUG_ID])
);

CREATE TABLE [PRICE]
(
[COST_PRICE] DECIMAL (5,2),
[SELLING_PRICE] DECIMAL (5,2),
[DISCOUNT] DECIMAL (4,2),
[EXPIRY_DATE] DATE NOT NULL,
[DRUG_ID] INT,
[SUPPLIER_ID] INT,
CONSTRAINT PRICE_FK1 FOREIGN KEY ([DRUG_ID]) REFERENCES [DRUG]([DRUG_ID]),
CONSTRAINT PRICE_FK2 FOREIGN KEY ([SUPPLIER_ID]) REFERENCES [SUPPLIER]([SUPPLIER_ID]),
);

CREATE TABLE [STOCK]
(
[DRUG_STORE_ID] INT NOT NULL,
[DRUG_ID] INT ,
[QUANTITY] INT ,
[AISLE_NUMBER] CHAR(2),
[DISCOUNTINUED] VARCHAR (3),
CONSTRAINT STOCK_ID_FK PRIMARY KEY ([DRUG_STORE_ID], [DRUG_ID])
);

CREATE TABLE [INVOICE]
(
[INVOICE_ID] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
[DRUG_STORE_ID] INT NOT NULL,
[DRUG_ID] INT NOT NULL,
[SUPPLIER_ID] INT NOT NULL,
[QUANTITY] INT,
[SUPPLY_DATE] DATE
CONSTRAINT INVOICE_FK1 FOREIGN KEY ([DRUG_ID]) REFERENCES [DRUG]([DRUG_ID]),
CONSTRAINT INVOICE_FK2 FOREIGN KEY ([SUPPLIER_ID]) REFERENCES [SUPPLIER]([SUPPLIER_ID]),
CONSTRAINT INVOICE_FK3 FOREIGN KEY ([DRUG_STORE_ID]) REFERENCES [DRUG_STORE]([DRUG_STORE_ID])
);

CREATE TABLE [RECIEPT]
(
[RECIEPT_ID] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
[QUANTITY] INT,
[PURCHASE_DATE] DATE,
[DRUG_ID] INT ,
[EMPLOYEE_ID] INT,
[PATIENT_ID] INT NOT NULL,
[DRUG_STORE_ID] INT,
CONSTRAINT RECIEPT_FK1 FOREIGN KEY ([DRUG_ID]) REFERENCES [DRUG]([DRUG_ID]),
CONSTRAINT RECIEPT_FK2 FOREIGN KEY ([EMPLOYEE_ID]) references [EMPLOYEE]([EMPLOYEE_ID]),
CONSTRAINT RECIEPT_FK3 FOREIGN KEY ([PATIENT_ID]) references [PATIENT]([PATIENT_ID]),
CONSTRAINT RECIEPT_FK4 FOREIGN KEY ([DRUG_STORE_ID]) REFERENCES [DRUG_STORE]([DRUG_STORE_ID])
);
--
--Read Table Queries

SELECT * FROM PATIENT
SELECT * FROM DOCTOR
SELECT * FROM EMPLOYEE
SELECT * FROM DRUG
SELECT * FROM DRUG_STORE
SELECT * FROM INVOICE
SELECT * FROM RECIEPT
SELECT * FROM PRESCRIPTION
SELECT * FROM STOCK
SELECT * FROM PRICE
SELECT * FROM SUPPLIER
SELECT * FROM DRUG_MANUFACTURER
SELECT * FROM DISTRIBUTOR

--Queries

--STORED PROCEDURES

--1)
CREATE PROCEDURE [GetPatientCountOnGender] 
@PatientGender VARCHAR(10) 
AS 
BEGIN 
SELECT COUNT(GENDER) 
AS COUNT FROM PATIENT WHERE GENDER = @PatientGender
END

EXEC GetPatientCountOnGender @PatientGender = 'Female';

--2)
CREATE PROCEDURE GetSupplierOnCity @City varchar(20), @SupplierType varchar(2) AS
BEGIN
SELECT COMPANY_NAME
FROM SUPPLIER
WHERE CITY = @City AND SUPPLIER_TYPE = @SupplierType
END

EXEC GetSupplierOnCity @City = 'Gulfport', @SupplierType = 'DT';

--3)
CREATE PROCEDURE GetEmployeeLessThanSalary @empSalary INT, @empCount INT OUTPUT AS
BEGIN
SELECT FIRST_NAME, LAST_NAME
FROM EMPLOYEE
WHERE SALARY < @empSalary;
SELECT @empCount = @@ROWCOUNT;
END

DECLARE @count INT;
EXEC GetEmployeeLessThanSalary @empSalary = 25, @empCount = @count OUTPUT;
SELECT @count AS 'Number of employees less than given salary';


--VIEWS
--1)

CREATE VIEW PATIENT_LIST
AS

SELECT pr.PATIENT_ID, pa.FIRST_NAME, pa.LAST_NAME FROM
PRESCRIPTION pr
JOIN
PATIENT pa ON (pr.PATIENT_ID = pa.PATIENT_ID )
WHERE pr.DOCTOR_ID = 1;

SELECT * FROM PATIENT_LIST

--2)

CREATE VIEW DRUG_STORE_DESIGNATION_COUNT
AS

SELECT dgs.DRUG_STORE_ID, e.DESIGNATION, COUNT(*) AS [NO_OF_EMPLOYEES]
FROM EMPLOYEE e
JOIN
DRUG_STORE dgs ON (e.DRUG_STORE_ID = dgs.DRUG_STORE_ID)
GROUP BY e.DESIGNATION, dgs.DRUG_STORE_ID

SELECT * FROM DRUG_STORE_DESIGNATION_COUNT

--3)

CREATE VIEW  SUPPLIER_DRUGPRICE
AS
SELECT s.SUPPLIER_ID, s.COMPANY_NAME, SUM(p.COST_PRICE * i.QUANTITY) AS [TOTAL_PRICE]
FROM SUPPLIER s
JOIN
PRICE p ON (p.SUPPLIER_ID = s.SUPPLIER_ID)
JOIN
INVOICE i ON (i.DRUG_ID = p.DRUG_ID)
GROUP BY s.SUPPLIER_ID, s.COMPANY_NAME

SELECT * FROM SUPPLIER_DRUGPRICE

--DML TRIGGER

CREATE TRIGGER PRICE_DELETE ON PRICE 
INSTEAD OF DELETE 
AS 
BEGIN 
RAISERROR ('Notify Sales Team', 16, 10); 
END;

DELETE FROM PRICE WHERE DRUG_ID =1

--TABLE-LEVEL CHECK CONSTRAINTS

ALTER TABLE PATIENT
ADD CONSTRAINT CHK_GENDER CHECK (GENDER IN('Male','Female','Other'));

ALTER TABLE DISTRIBUTOR
ADD CONSTRAINT CHK_SIZE CHECK (DISTRIBUTOR_SIZE IN('Small','Medium','Large'));

ALTER TABLE SUPPLIER
ADD CONSTRAINT CHK_TYPE CHECK (SUPPLIER_TYPE IN('DT','DM'));

ALTER TABLE PATIENT
ADD CONSTRAINT CHK_CONTACT1 CHECK (CONTACT_NO BETWEEN 1000000000 AND 9999999999);

ALTER TABLE EMPLOYEE
ADD CONSTRAINT CHK_CONTACT2 CHECK (CONTACT_NO BETWEEN 1000000000 AND 9999999999);

ALTER TABLE DOCTOR
ADD CONSTRAINT CHK_CONTACT3 CHECK (CONTACT_NO BETWEEN 1000000000 AND 9999999999);

ALTER TABLE DRUG_STORE
ADD CONSTRAINT CHK_CONTACT4 CHECK (CONTACT_NO BETWEEN 1000000000 AND 9999999999);

ALTER TABLE SUPPLIER
ADD CONSTRAINT CHK_CONTACT5 CHECK (CONTACT_NO BETWEEN 1000000000 AND 9999999999);

--UDF
--TOTAL PROFIT BY BY EACH EMPLOYEE USING EMPLOYEEID AS INPUT
CREATE FUNCTION GetProfit (@employeeID VARCHAR(50))
RETURNS FLOAT
AS
BEGIN
DECLARE @totalprofit FLOAT
SELECT @totalprofit = 
(SELECT SUM((p.SELLING_PRICE - p.COST_PRICE)*r.QUANTITY) AS [TOTAL_PROFIT]
FROM EMPLOYEE e
JOIN 
RECIEPT r ON (e.EMPLOYEE_ID = r.EMPLOYEE_ID)
JOIN
PRICE p ON (p.DRUG_ID = r.DRUG_ID)
WHERE e.EMPLOYEE_ID = @employeeID
GROUP BY e.EMPLOYEE_ID)
RETURN  @totalprofit
END;

SELECT DBO.GetProfit (2) AS TOTAL_PROFIT;

CREATE FUNCTION GetDoctorNameOnSpecialization
(@specialization varchar(30))
RETURNS varchar(30)
AS
BEGIN
DECLARE @DOCTOR_NAME VARCHAR(100)
SELECT @DOCTOR_NAME = CONCAT (FIRST_NAME,' ',LAST_NAME)
FROM DOCTOR
WHERE SPECIALIZATION = @specialization
RETURN @DOCTOR_NAME
END;

SELECT dbo.GetDoctorNameOnSpecialization('Cardiology') AS DOCTOR_FULL_NAME;

--NON CLUSTERED INDEXES
CREATE NONCLUSTERED INDEX Index_StockQuantity
ON STOCK(Quantity ASC);

CREATE nonclustered INDEX idx_LASTNAME
ON EMPLOYEE(LAST_NAME);

CREATE nonclustered INDEX idx_CITY
ON SUPPLIER(CITY);

CREATE nonclustered INDEX idx_GENDER
ON PATIENT(GENDER);

CREATE nonclustered INDEX idx_FIRSTNAME
ON DOCTOR(FIRST_NAME) ;

--COLUMN DATA ENCRYPTION  

CREATE MASTER KEY
ENCRYPTION BY PASSWORD='PHARMACY_MANAGEMENT';
SELECT NAME KEYNAME,
SYMMETRIC_KEY_ID KEYID,
KEY_LENGTH KEYLENGTH,
algorithm_desc KeyAlgorithm
FROM sys.symmetric_keys;

-- ENCRYPTION_EMPLOYEE

ALTER TABLE [dbo].[EMPLOYEE] ADD USERNAME VARCHAR(50), [Password] VARBINARY(500)
SELECT * FROM [dbo].[EMPLOYEE]

CREATE CERTIFICATE EmpPass
 with SUBJECT='EMPLOYEE SAMPLE WORD';
 GO
 CREATE SYMMETRIC KEY EmpPass_SM
  WITH ALGORITHM = AES_256
  ENCRYPTION BY CERTIFICATE EmpPass

  OPEN SYMMETRIC KEY EmpPass_SM
	DECRYPTION BY CERTIFICATE EmpPass;

	UPDATE EMPLOYEE SET [USERNAME] = LAST_NAME,
	[Password] = ENCRYPTBYKEY(KEY_GUID('EmpPass_SM'), CONVERT(VARBINARY,'Pass123'))

	OPEN SYMMETRIC KEY EmpPass_SM
	DECRYPTION BY CERTIFICATE EmpPass;
	select*, CONVERT(VARCHAR,DECRYPTBYKEY([Password]))
		AS 'Decrypted Password'
		FROM EMPLOYEE
		GO

SELECT * FROM [EMPLOYEE]

-- ENCRYPTION_PATIENT

alter table PATIENT add Username varchar(50), [Password] varbinary(500)
SELECT * FROM PATIENT

create certificate PATPass
 with SUBJECT='PATIENT SAMPLE WORD';
 GO
 CREATE SYMMETRIC KEY PATPass_SM
  WITH ALGORITHM=AES_256
  ENCRYPTION BY CERTIFICATE PATPass

  OPEN SYMMETRIC KEY PATPass_SM
	DECRYPTION BY CERTIFICATE PATPass;

	UPDATE PATIENT SET [Username]=LAST_NAME,
	[Password]=ENCRYPTBYKEY(KEY_GUID('PATPass_SM'),convert(varbinary,'Pass123'))

	OPEN SYMMETRIC KEY PATPass_SM
	DECRYPTION BY CERTIFICATE PATPass;
	select*,
		CONVERT(varchar,DECRYPTBYKEY([Password]))
		As 'Decrypted Password'
		From PATIENT
		go

		select * from PATIENT

--ENCRYPTION_SUPPLIER

alter table [dbo].[SUPPLIER] add Username varchar(50), [Password] varbinary(500)
SELECT * FROM [dbo].[SUPPLIER]

create certificate SUPPLIERPass
 with SUBJECT='SUPPLIER SAMPLE WORD';
 GO
 CREATE SYMMETRIC KEY SUPPLIERPass_SM
  WITH ALGORITHM=AES_256
  ENCRYPTION BY CERTIFICATE SUPPLIERPass

  OPEN SYMMETRIC KEY SUPPLIERPass_SM
	DECRYPTION BY CERTIFICATE SUPPLIERPass;

	UPDATE SUPPLIER SET [Username]=COMPANY_NAME,
	[Password]=ENCRYPTBYKEY(KEY_GUID('SUPPLIERPass_SM'),convert(varbinary,'Pass123'))

	OPEN SYMMETRIC KEY SUPPLIERPass_SM
	DECRYPTION BY CERTIFICATE SUPPLIERPass;
	select*,
		CONVERT(varchar,DECRYPTBYKEY([Password]))
		As 'Decrypted Password'
		From SUPPLIER
		go

SELECT * FROM [dbo].[SUPPLIER]

